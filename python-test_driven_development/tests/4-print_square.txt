===========================
How to Use 4-print_square.py
===========================

This module defines a function ``print_square(size)`` that prints a square
using the character #.

Usage
=====

The function prints a square where each side has length ``size``:

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

The function also works with size 0, which prints nothing:

::

    >>> print_square(0)

The function also works with size 1, which prints a single #:

::

    >>> print_square(1)
    #

Error Handling
=============

The function raises TypeError if size is not an integer:

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

The function raises ValueError if size is negative:

::

    >>> print_square(-4)
    Traceback (most recent call last):
    ValueError: size must be >= 0

The function raises TypeError if size is a negative float:

::

    >>> print_square(-5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

The function requires exactly one argument:

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer
