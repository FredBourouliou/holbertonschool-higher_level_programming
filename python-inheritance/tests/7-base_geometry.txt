The ``7-base_geometry`` module
======================

This module contains the BaseGeometry class for geometric calculations.

Using ``BaseGeometry``
-------------------

First, we need to create an instance of BaseGeometry:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> type(bg) == BaseGeometry
    True

Test documentation:
    >>> module_doc = __import__('7-base_geometry').__doc__
    >>> len(module_doc) > 0
    True

    >>> class_doc = __import__('7-base_geometry').BaseGeometry.__doc__
    >>> len(class_doc) > 0
    True

    >>> area_doc = __import__('7-base_geometry').BaseGeometry.area.__doc__
    >>> len(area_doc) > 0
    True

    >>> val_doc = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
    >>> len(val_doc) > 0
    True

Testing the area method
----------------------

The area method is not implemented and should raise an Exception:

    >>> try:
    ...     print(bg.area())
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

    >>> try:
    ...     bg.area(1)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] area() takes 1 positional argument but 2 were given

Testing integer_validator method
------------------------------

Test with valid integers:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("positive", 1)
    >>> bg.integer_validator("big number", 999999999999)

Test with invalid types:

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("float", 3.14)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] float must be an integer

    >>> try:
    ...     bg.integer_validator("bool", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] bool must be an integer

    >>> try:
    ...     bg.integer_validator("list", [1, 2, 3])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] list must be an integer

    >>> try:
    ...     bg.integer_validator("dict", {"key": "value"})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] dict must be an integer

    >>> try:
    ...     bg.integer_validator("tuple", (1, 2))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] tuple must be an integer

    >>> try:
    ...     bg.integer_validator("set", {1, 2, 3})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] set must be an integer

    >>> try:
    ...     bg.integer_validator("complex", complex(1, 1))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] complex must be an integer

    >>> try:
    ...     bg.integer_validator("inf", float('inf'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf must be an integer

    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] nan must be an integer

Test with invalid values:

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

    >>> try:
    ...     bg.integer_validator("negative", -999999999999)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] negative must be greater than 0

Test with None and empty values:

    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

    >>> try:
    ...     bg.integer_validator("", 1)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test with missing arguments:

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test with wrong number of arguments:

    >>> try:
    ...     bg.integer_validator("age", 1, 2)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() takes 3 positional arguments but 4 were given 